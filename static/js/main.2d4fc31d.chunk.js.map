{"version":3,"sources":["redux/userSlice.js","Login.js","modal.js","Navbar.js","Todolist.jsx","App.js","redux/store.js","index.js"],"names":["userSlice","createSlice","name","initialState","userName","password","theme","todos","reducers","addUser","state","action","payload","modifiyUser","user","changeThemeDark","themeDark","changeThemeLight","themeLight","addTodoList","actions","changeTheme","Login","history","useHistory","dispatch","useDispatch","useState","setName","setPassword","console","log","inputPlaceholder","useSelector","themeBase","className","id","placeholder","value","type","onChange","e","target","onClick","length","push","preventDefault","Modal","modalClose","setUser","Navbar","openModal","setOpenModal","size","Todolist","nameInput","setTodos","todo","setTodo","completedTodoToogle","setCompletedTodosToogle","completedTodoList","setCompletedTodoList","randomIdea","setrandomIdea","toggleCompleted","index","updatedTodos","completed","useEffect","json","localStorage","getItem","loadedTodos","JSON","parse","stringify","setItem","CompletedTodos","filter","completedArray","onSubmit","newTodo","text","concat","Axios","get","then","response","data","activity","catch","err","error","map","deleteTodo","App","from","to","path","basename","component","exact","store","configureStore","reducer","useReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d4fc31d.chunk.js","sourcesContent":["import { createSlice, createEntityAdapter } from '@reduxjs/toolkit'\n\n// export const loginAdapter = createEntityAdapter();\n// export const loginSelectors = loginAdapter.getSelectors((state) => state.users )\n\nconst userSlice = createSlice({\n    name: \"users\",\n    initialState: {\n        userName: \"Wayne\",\n        password: \"\",\n        theme: \"light\",\n        todos: []\n    },\n    \n    reducers: {\n            addUser: (state, action) => {\n                state.userName = action.payload.name;\n                state.password = action.payload.password;           \n            \n            },\n            modifiyUser: (state, action) => {\n                state.userName = action.payload.user;\n            },\n            changeThemeDark: (state, action) => {\n                state.theme = action.payload.themeDark;\n            },\n            changeThemeLight: (state, action) => {\n                state.theme = action.payload.themeLight;\n            },\n            addTodoList: (state, action) => {\n                state.todos = action.payload.todos;\n            }\n\n        },\n    \n});\n\nexport const {addUser, modifiyUser, changeTheme, changeThemeLight, changeThemeDark, addTodoList} = userSlice.actions\nexport default userSlice.reducer","import React, {useState} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport { addUser } from \"./redux/userSlice\";\nimport \"./Styles/signin.css\"\nimport {useHistory } from 'react-router-dom';\nfunction Login() {\n\n    let history = useHistory();\n    const dispatch = useDispatch();\n    const [name, setName] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    console.log(name, password);\n    const inputPlaceholder = useSelector((state) => state.user.userName)\n    const themeBase = useSelector ((state) => (state.user.theme))\n    \n\n\n   \n    \n    \n\n    const userAdd = (e) => {\n        if (name.length < 4 ) {\n          history.push(\"/signin\");\n          \n          \n        }else {\n            e.preventDefault();\n        dispatch(addUser({name,password}))\n        history.push(\"/Dashboard\");\n       \n        }\n        \n        \n    }\n\n    \n\n\n    \n\n    return (\n        <div>\n            \n        <div className= {\"signin-ctn-\"+themeBase}>\n             \n             <span id = {\"slogan-\"+themeBase}>keeping track of things? - </span>\n              <span id = \"Useverb\">UseList</span>\n            <br />\n            <input placeholder={\"Name: 4+ digits like \" + inputPlaceholder +\"!\"} className=\"form-inner\" value = {name} type=\"text\" onChange={(e)=> setName(e.target.value)}  /><br />\n            <input placeholder={\"Password: \" + inputPlaceholder+\"Rockz!123\"} className = \"form-inner\" value ={password} type=\"password\" onChange={e=> setPassword(e.target.value)} />\n            \n            <br/>\n            <button id={\"logoin-btn-\"+themeBase} onClick = {userAdd}>login</button>\n        </div>\n        </div>\n    )\n}\n\nexport default Login\n","import React, {useState} from 'react'\nimport \"./Styles/modal.css\"\nimport {modifiyUser, changeThemeDark, changeThemeLight} from \"./redux/userSlice\"\nimport {useDispatch, useSelector} from 'react-redux'\n\n\n\n\nfunction Modal({modalClose}) {\n\n    const dispatch  = useDispatch();    \n    const [user, setUser] =  useState(\"\")\n    const users = useSelector((state) => (state.user.userName))\n    const themeBase = useSelector ((state) => (state.user.theme))\n    const themeDark = \"dark\"\n    const themeLight = \"light\"\n    \n    \n\n    const ChangeUser = () => {\n        dispatch(modifiyUser({user}))        \n        \n    }\n    const themeChanger = () => {\n        if (themeBase === \"light\") {\n            dispatch(changeThemeDark({themeDark}))\n        } else {\n            dispatch(changeThemeLight({themeLight}))\n        }\n\n        \n    }\n\n    \n    \n    return (\n        <div  \n        className = \"modal-transback\"\n       \n        >\n            <div className={\"modalcontain-\" + themeBase}>\n            \n                <input\n                \n                 placeholder=\"New name...\"\n                  className=\"form-inner\" \n                  value = {user} type=\"text\"\n                     onChange={(e)=> setUser(e.target.value)}  />\n                     <button onClick = {() => {\n                        modalClose(false)          \n                    }} className={\"cross-\"+themeBase}>X</button>\n                     <br />\n                <div className=\"footer\">\n                <button onClick = {ChangeUser()}>save name</button>\n                    <button onClick = {themeChanger}>{themeBase+\" mode\"}</button>\n                    \n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Modal\n","import React, {useState} from 'react'\nimport \"./Styles/navbar.css\"\nimport Modal from \"./modal\"\nimport { useSelector } from 'react-redux';\nimport { ImBrightnessContrast } from 'react-icons/im';\nimport { useHistory} from \"react-router-dom\";\n\nfunction Navbar() {\n    const themeBase = useSelector ((state) => (state.user.theme))\n    let history = useHistory();\n    const [openModal, setOpenModal] = useState(false)\n    return (\n        \n        <div className={\"navbar-\"+themeBase}>\n            <button className={\"logout-\"+themeBase} onClick = {() => {\n                history.push(\"/signin\");\n            }}>logout</button>\n        <button className={\"openModalBtn-\"+themeBase} onClick ={() => {\n                setOpenModal(true);\n                {console.log(openModal)}\n              }}><ImBrightnessContrast size={30}/></button>\n        { openModal && <Modal modalClose = {setOpenModal}/>}\n        </div>\n    )\n}\n\nexport default Navbar\n","import React, {useState, useEffect} from 'react'\nimport { BsPlusSquareFill } from \"react-icons/bs\";\nimport { addTodoList } from \"./redux/userSlice\";\nimport {useSelector} from 'react-redux';\nimport {useDispatch} from 'react-redux';\nimport \"./Styles/todo.css\"\nimport {TiTick} from 'react-icons/ti';\nimport Axios from \"axios\";\n\nfunction Todolist() {\n  const dispatch = useDispatch();\n  const nameInput = useSelector ((state) => (state.user.userName))\n  const [todos, setTodos] = useState([])\n  const [todo, setTodo] = useState(\"\");\n  const [todoHistory, setTodoHistory] = useState([])\n  const [completedTodoToogle,setCompletedTodosToogle] = useState(false)\n  const [completedTodoList, setCompletedTodoList] = useState([]);\n  const [randomIdea, setrandomIdea] = useState(\"\")\n\n  const getIdea =() => {\n    Axios.get(\"https://www.boredapi.com/api/activity\").then(\n      (response) => {\n        setrandomIdea(response.data.activity)\n        console.log(randomIdea);\n        setTodo(randomIdea);\n      }\n    )\n    .catch(err => console.error(err));\n  }\n\n  useEffect(() => {\n    const json = localStorage.getItem(\"todos\");\n    const loadedTodos = JSON.parse(json);\n    if (loadedTodos) {\n      setTodos(loadedTodos);\n    }\n  }, []);\n\n  useEffect(() => {\n    const json = JSON.stringify(todos);\n    localStorage.setItem(\"todos\", json);\n  }, [todos]);\n  useEffect(() => {\n    const json = JSON.stringify(todos);\n    localStorage.setItem(\"todos\", json);\n  }, [completedTodoList]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const newTodo = {\n      \n      text: todo,\n      completed: false,\n    };\n\n    setTodos([...todos].concat(newTodo));\n    setTodo(\"\");\n    dispatch(addTodoList({todos}))\n  }\n  \n  function deleteTodo(id) {\n    let updatedTodos = [...todos].filter((todo) => todo.id !== id);\n    setTodos(updatedTodos);\n    \n  }\n\n  function completedArray(e) {\n    \n    const CompletedTodos = todos.filter( todo => {\n      return todo.completed !== false;\n      \n    });\n    \n    setCompletedTodoList(CompletedTodos)\n    console.log(completedTodoList)\n  }\n  \n  \n  function toggleCompleted(index) {\n    const updatedTodos = [...todos]\n    updatedTodos[index].completed = !updatedTodos[index].completed\n    setTodos(updatedTodos);\n  }\n\n    return (\n        <div className = \"todolist-contain\">\n                <h1 className = \"todoTitle\">{\"Hello  \"+nameInput}</h1>\n                <h2 className = \"todoTitle\">What needs doing today?</h2>\n                <button \n                  className={\"showTodos-\" + completedTodoToogle}\n                 onClick={() => {\n                   completedArray();\n                   setCompletedTodosToogle(!completedTodoToogle);\n                 }}>Show only completed Tasks</button>\n          <form onSubmit={handleSubmit}>\n          <button  \n          className = \"input-btn\"\n          type=\"submit\"\n          >< BsPlusSquareFill size ={20}/></button>\n            <input className = \"input-box\"\n              placeholder = \"Add task...\"\n              type=\"text\"\n              onChange={(e) => setTodo(e.target.value)}\n              value={todo}\n            />\n            \n          </form>\n          <div className=\"organiser\">\n          <button onClick={getIdea} className=\"random-idea\">random idea generator</button>\n          \n          </div>\n          <div>\n\n            {completedTodoToogle ? \n           <div className=\"todoText-ctn\">\n           {completedTodoList.map((completed, index) => (\n             <div key={completed.id} className={\"todo-\"+ completed.completed}>\n              <div className = \"todos-text\">{completed.text}</div>\n               <div className=\"todo-actions\">\n               <button \n                className ={\"todoBtn-\" + completed.completed}\n                onClick = {() => toggleCompleted(index)}\n                ><TiTick/></button>\n                 \n               </div>\n             </div>\n             \n           )) }</div> :\n           <div className=\"todoText-ctn\">\n          {todos.map((todo, index) => (\n            <div key={todo.id} className={\"todo-\" + todo.completed}>\n                  <div className = \"todos-text\">{todo.text}</div>\n              <div className=\"todo-actions\">\n                <button \n                className ={\"todoBtn-\" + todo.completed}\n                onClick = {() => toggleCompleted(index)}><TiTick/></button>\n                <button className = {\"todoClsBtn-\" + todo.completed}\n                 onClick={() => deleteTodo(todo.id)} \n                 >X</button>\n              </div>\n            </div>\n            \n          )) } </div> }\n    \n          </div>\n          \n        </div>\n    )\n}\n\nexport default Todolist\n","\nimport './App.css';\nimport Login from './Login';\nimport Navbar from './Navbar';\nimport Todolist from './Todolist';\nimport {BrowserRouter as Router, Route, Redirect} from 'react-router-dom';\nimport \"./Styles/todo.css\"\n\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      \n      <header className=\"App-header\">\n      <Redirect from=\"/\" to=\"signin\" />\n        <Navbar />\n        <Route path = \"/signin\" basename=\"/sigin\"  component = {Login}/>\n        <Route path=\"/Dashboard\" exact component = {Todolist}/>\n        \n      </header>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport  useReducer from \"./userSlice\";\n\n\nconst store = configureStore({\n    reducer: {\n        user: useReducer,\n        \n    },\n});\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from \"./redux/store\"\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}